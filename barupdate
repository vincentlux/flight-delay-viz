<!DOCTYPE html>
<html>
<head>
    <title>Flight Delay Heatmap</title>
    <script src="https://d3js.org/d3.v5.min.js" charset="utf-8"></script>
    <script src="legend.js"></script>
    <style>

        rect.bordered {
            stroke: darkgray;
            stroke-width:2px;   
        }

    </style>
</head>

<body onload="legendDemo()">

<h1>Flight Delay Heatmap</h1>
<div id="heatmap"></div>
<div id="legend"></div>
<div id="barchart"></div>
    <script type="text/javascript">


        // References
        // http://bl.ocks.org/PBrockmann/raw/635179ff33f17d2d75c2/
        // http://bl.ocks.org/tjdecke/raw/5558084/

        // ===============================================================
        // Define initial tooltip.
        var tooltip = d3.select(origin)
            .append("div")
            .style("position", "absolute")
            .style("visibility", "hidden");

        // ===============================================================
        // Define display property.
        var margin = { top: 50, right: 0, bottom: 100, left: 50 };
        var width = 920 - margin.left - margin.right;
        var height = 310 - margin.top - margin.bottom;
        var gridSize = Math.floor(width / 24);
        var legendElementWidth = gridSize * 2;
        
        var buckets = 5;
        var colors = ["#1a9641","#a6d96a","#ffffbf","#fdae61","#d7191c"];


        // ===============================================================
        // Define days and hours attributes.
        var days = ["Mon", "Tue", "Wed", "Thu", "Fri", "Sat", "Sun"];
        var hours = ["00", "01", "02", "03", "04", "05", "06", "07",
                    "08", "09", "10", "11", "12", "13", "14", "15",
                    "16", "17", "18", "19", "20", "21", "22", "23"];

        // Define TEST data array.
        var days = ["Mon", "Tue", "Wed", "Thu", "Fri", "Sat", "Sun"];
        var hours = ["00", "01", "02", "03", "04", "05", "06", "07",
                    "08", "09", "10", "11", "12", "13", "14", "15",
                    "16", "17", "18", "19", "20", "21", "22", "23"];

        // Define TEST data array.
        var data = [
            {DayOfWeek:2, Origin: "CLT", Dest: "PHX", CRSDepTime: "1619", DepDelay: -3.0, UniqueCarrier: "AA"},
            {DayOfWeek:2, Origin: "CLT", Dest: "PHX", CRSDepTime: "204", DepDelay: 0.0, UniqueCarrier: "UA"},
            {DayOfWeek:2, Origin: "CLT", Dest: "PHX", CRSDepTime: "1", DepDelay: 5.0, UniqueCarrier: "Delta"},
            {DayOfWeek:3, Origin: "CLT", Dest: "PHX", CRSDepTime: "1619", DepDelay: -10.0, UniqueCarrier: "AA"},
            {DayOfWeek:3, Origin: "CLT", Dest: "PHX", CRSDepTime: "1619", DepDelay: 20.0, UniqueCarrier: "UA"},
            {DayOfWeek:3, Origin: "CLT", Dest: "PHX", CRSDepTime: "1619", DepDelay: 24.0, UniqueCarrier: "Delta"},
            {DayOfWeek:3, Origin: "CLT", Dest: "PHX", CRSDepTime: "1619", DepDelay: 7.0, UniqueCarrier: "Delta"},
            {DayOfWeek:4, Origin: "CLT", Dest: "PHX", CRSDepTime: "2359", DepDelay: 10.0, UniqueCarrier: "AA"},
            {DayOfWeek:4, Origin: "CLT", Dest: "PHX", CRSDepTime: "1820", DepDelay: 35.0, UniqueCarrier: "UA"},
            {DayOfWeek:4, Origin: "CLT", Dest: "PHX", CRSDepTime: "830", DepDelay: 2.0, UniqueCarrier: "Delta"},
            {DayOfWeek:4, Origin: "CLT", Dest: "PHX", CRSDepTime: "2250", DepDelay: -8.0, UniqueCarrier: "Delta"},
            {DayOfWeek:4, Origin: "CLT", Dest: "PHX", CRSDepTime: "0655", DepDelay: 9.0, UniqueCarrier: "AA"},
            {DayOfWeek:5, Origin: "CLT", Dest: "PHX", CRSDepTime: "1230", DepDelay: 52.0, UniqueCarrier: "AA"},
            {DayOfWeek:5, Origin: "CLT", Dest: "PHX", CRSDepTime: "1230", DepDelay: 1.0, UniqueCarrier: "UA"},
            {DayOfWeek:5, Origin: "CLT", Dest: "PHX", CRSDepTime: "1230", DepDelay: -2.0, UniqueCarrier: "Delta"},
            {DayOfWeek:5, Origin: "CLT", Dest: "PHX", CRSDepTime: "1230", DepDelay: 8.0, UniqueCarrier: "AA"},
            {DayOfWeek:5, Origin: "CLT", Dest: "PHX", CRSDepTime: "1230", DepDelay: 36.0, UniqueCarrier: "AA"},
            {DayOfWeek:5, Origin: "CLT", Dest: "PHX", CRSDepTime: "1230", DepDelay: 17.0, UniqueCarrier: "Delta"},
            {DayOfWeek:5, Origin: "CLT", Dest: "PHX", CRSDepTime: "1230", DepDelay: 28.0, UniqueCarrier: "UA"},
            {DayOfWeek:6, Origin: "CLT", Dest: "PHX", CRSDepTime: "1815", DepDelay: 0.0, UniqueCarrier: "AA"},
            {DayOfWeek:6, Origin: "CLT", Dest: "PHX", CRSDepTime: "1900", DepDelay: 8.0, UniqueCarrier: "UA"},
            {DayOfWeek:7, Origin: "CLT", Dest: "PHX", CRSDepTime: "1440", DepDelay: 90.0, UniqueCarrier: "AA"},
            {DayOfWeek:7, Origin: "CLT", Dest: "PHX", CRSDepTime: "1440", DepDelay: 48.0, UniqueCarrier: "UA"},
            {DayOfWeek:7, Origin: "CLT", Dest: "PHX", CRSDepTime: "1540", DepDelay: 33.0, UniqueCarrier: "Delta"},
            {DayOfWeek:7, Origin: "CLT", Dest: "PHX", CRSDepTime: "1540", DepDelay: 9.0, UniqueCarrier: "Delta"},
            {DayOfWeek:1, Origin: "CLT", Dest: "PHX", CRSDepTime: "1230", DepDelay: -12.0, UniqueCarrier: "AA"},
            {DayOfWeek:1, Origin: "CLT", Dest: "PHX", CRSDepTime: "1230", DepDelay: 0.0, UniqueCarrier: "UA"},
            {DayOfWeek:1, Origin: "CLT", Dest: "PHX", CRSDepTime: "1230", DepDelay: 26.0, UniqueCarrier: "Delta"},
            {DayOfWeek:1, Origin: "CLT", Dest: "PHX", CRSDepTime: "1230", DepDelay: 6.0, UniqueCarrier: "Delta"},
            {DayOfWeek:1, Origin: "CLT", Dest: "PHX", CRSDepTime: "1230", DepDelay: -1.0, UniqueCarrier: "AA"}
        ];

        // console.log(data);


        // ===============================================================
        // Convert CRSDepTime data into 4 digits ("1" -> "0001").
        function pad_with_zeroes(CRSDepTime) {

            var my_string = '' + CRSDepTime;
            while (my_string.length < 4) {
                my_string = '0' + my_string;
            }
            return my_string;
        }
        // Call the function to update the original data.
        data.forEach(function(d){
            d.CRSDepTime =  pad_with_zeroes(d.CRSDepTime)
        });
      

        // References
        // http://learnjsdata.com/group_data.html

        // ===============================================================
        // Group data based on DayOfWeek and updated CRSDepTime (DepHour).
        // Calculate the average DepDelay for each group of data.
        var arrayNested = d3.nest()
            .key(function(d) {return d.DayOfWeek;})
            .key(function(d) {return d.CRSDepTime.substring(0,2);})
            .rollup(function(d) {return d3.mean(d, function(s) {return s.DepDelay;});})
            .entries(data)
            .map(function(subgroup) {
                return {
                    DayOfWeek: subgroup.key,
                    Time: subgroup.values.map(function (d) {
                        return {CRSDepTime: d.key,
                                avgDepDelay: d.value}       
                    })
                }
            });

        var flattened = [];
        arrayNested.forEach(function(day) {
            day.Time.forEach(function(CRSDepTime) {
                flattened.push({
                    DayOfWeek: day.DayOfWeek,
                    CRSDepTime: CRSDepTime.CRSDepTime,
                    avgDepDelay: CRSDepTime.avgDepDelay
                });
            });
        });

        /*var flattenedTwo = [];
        arrayNestedTwo.forEach(function(y) {
            y.Carriers.forEach(function(x) {
                flattened.push({
                    DayOfWeek: y.DayOfWeek,
                    Airlines: x.UniqueCarrier,
                    avgAirDelay: x.avgAirDelay
                });
            });
        });*/

        console.log(arrayNested);

        console.log(flattened);

        // input should be flattened
        /*flattened.forEach(function(d) {
            DayOfWeek = +d.DayOfWeek,
                CRSDepTime = +d.CRSDepTime,
                avgDepDelay = +d.avgDepDelay
        });*/
        // console.log(flattened)
        console.log(JSON.stringify(arrayNested));


        var height = 500;
        var width = 500;
        var margin = 40;

        var arrayNestedTwo = d3.nest()
            .key(function(d) {return d.DayOfWeek;})
            .key(function(d) {return d.UniqueCarrier;})
            .rollup(function(d) {return d3.mean(d, function(s) {return s.DepDelay;});})
            .entries(data)
            .map(function(subgroup) {
                return {
                    DayOfWeek: subgroup.key,
                    Carriers: subgroup.values.map(function (d) {
                        return {Airlines: d.key,
                            avgAirDelay: d.value}
                    })
                }
            });
        console.log(arrayNestedTwo);


        var flattenedTwo = [];
        arrayNestedTwo.forEach(function(y) {
            console.log(y);
            y.Carriers.forEach(function(x) {
                console.log(x);
                flattenedTwo.push({
                    DayOfWeek: y.DayOfWeek,
                    Airlines: x.Airlines,
                    avgAirDelay: x.avgAirDelay
                });
            });
        });



        //console.log(flattenedTwo);
        //console.log(JSON.stringify(arrayNestedTwo));

        var flattenedTwoFilter = flattenedTwo.filter(function (d) {return d.DayOfWeek == 5});
        console.log(flattenedTwoFilter);



        // input should be flattened
        /*flattenedTwo.forEach(function(d) {
            DayOfWeek = +d.DayOfWeek,
                Carriers = +d.UniqueCarrier,
                avgAirDelay = +d.avgAirDelay
        });
        console.log(flattenedTwo);*/
        var x = d3.scaleBand().rangeRound([0, width]).padding(0.1)
        //.domain(data.map(function (d) {return d.UniqueCarrier}))
            .domain(flattenedTwoFilter.map(function (d) {return d.Airlines}))
            //.domain([0, 30])
            .range([0 + margin, width - margin]);
        //d3.scaleBand().rangeRound([0, width]).padding(0.1)


        // Life expectancy values all fall between 70 and 90.
        var airDv = flattenedTwoFilter.map(function (d) {return d.avgAirDelay});

        var y = d3.scaleLinear()
            //.domain([90, 70])
            .domain([d3.max(airDv), 0])
            .range([margin,height-margin]);

        // Define a color scale.
        var region_color = d3.scaleOrdinal(d3.schemeCategory10);




        // Create the SVG canvas that will be used to render the visualization.
        var svg = d3.select("#barchart")
            .append("svg")
            .attr("width", width)
            .attr("height", height);

        // Add axes.  First the X axis and label.
        svg.append("g")
            .attr("class", "axis")
            .attr("transform", "translate(0,"+(500-margin)+")")
            .call(d3.axisBottom(x));


        svg.append("text")
            .attr("class", "axis-label")
            .attr("y", 495)
            .attr("x",0 + (500 / 2))
            .style("text-anchor", "middle")
            .text("Unique Carrier");

        // Now the Y axis and label.
        svg.append("g")
            .attr("class", "axis")
            .attr("transform", "translate("+margin+",0)")
            .call(d3.axisLeft(y));

        svg.append("text")
            .attr("transform", "rotate(90)")
            .attr("class", "axis-label")
            .attr("y", -5)
            .attr("x",0 + (500 / 2))
            .style("text-anchor", "middle")
            .text("Average Delay Time");

        svg.selectAll("bar")
            .data(flattenedTwoFilter)
            .enter().append("rect")
            .attr("class", "bar")
            .style("fill", "steelblue")
            .attr("x", function (d) {return x(d.Airlines);})
            .attr("width", x.bandwidth())
            .attr("y", function (d) {return y(d.avgAirDelay);})
            .attr("height", function(d) { return height - margin - y(d.avgAirDelay); });



        // ===============================================================
        // Create the SVG canvas that will be used to render the visualization.
        var svg = d3.select("#heatmap")
            .append("svg")
            .attr("width", width + margin.left + margin.right)
            .attr("height", height + margin.top + margin.bottom)
            .append("g")
            .attr("transform", "translate(" + margin.left + "," + margin.top + ")");


        var borderPath = svg.append("rect")
            .attr("x", -1)
            .attr("y", -1)
            .attr("rx", 6)
            .attr("ry", 6)
            .attr("height", 255)
            .attr("width", width-4)
            .style("stroke", "darkgrey")
            .style("stroke-width", "2")
            .style("fill", "none");

        // ===============================================================
        // Create the SVG canvas for legend area.
        var legend = d3.select("#legend")
            .append("svg")
            .attr("width", width + margin.left + margin.right)
            .attr("height", height + margin.top + margin.bottom)
            .append("g")
            .attr("transform", "translate(" + margin.left + ")");


        // ===============================================================
        // Create hourLabels for x-axis and dayLabels for y-axis.
        var hourLabels = svg.append("g")
            .attr("class", "hourLabels")
            .selectAll(".hourLabel")
            .data(hours)
            .enter().append("text")
                .text(function(d) { return d; })
                .attr("x", 0)
                .attr("y", function(d, i) {
                    return i * gridSize;
                })
                .style("text-anchor", "middle")
                .attr("transform", function(d, i) {
                    return "translate(" + gridSize / 2 + ", -3) " +
                            "rotate(-90) " +
                            "rotate(90, 0, " + (i * gridSize) + ")"
                });

        var dayLabels = svg.append("g")
            .attr("class", "dayLabels")
            .selectAll(".dayLabel")
            .data(days)
            .enter().append("text")
            .text(function (d) { return d; })
            .attr("x", 0)
            .attr("y", function (d, i) {
                return i * gridSize;
            })
            .style("text-anchor", "end")
            .attr("transform", "translate(-3," + gridSize / 1.5 + ")");


        // ===============================================================
        // Get flattened data {DayOfWeek: "2", CRSDepTime: "16", avgDepDelay: -3}
        var flattened = [];
        arrayNested.forEach(function(day) {
            day.Time.forEach(function(CRSDepTime) {
                flattened.push({
                    DayOfWeek: day.DayOfWeek,
                    CRSDepTime: CRSDepTime.CRSDepTime,
                    avgDepDelay: CRSDepTime.avgDepDelay
                });
            });
        });

        // input should be flattened
        flattened.forEach(function(d) {
            DayOfWeek = +d.DayOfWeek,
            CRSDepTime = +d.CRSDepTime,
            avgDepDelay = +d.avgDepDelay
        });
        // console.log(flattened)
        
           
        // ===============================================================
        // Render heatmap. 
        var heatmapChart = function(data) {
            
            var cards = svg.selectAll(".CRSDepTime")
                .data(data, function(d) {return d.DayOfWeek+':'+d.CRSDepTime;});

            cards.append("title");

            cards.enter().append("rect")
                .attr("x", function(d) { return (d.CRSDepTime) * gridSize; })
                .attr("y", function(d) { return (d.DayOfWeek-1) * gridSize; })
                .attr("rx", 4)      // define the radius of the ellipse used to 
                .attr("ry", 4)      // round off the corners of the rectangle.
                .attr("class", "hour bordered")
                .attr("width", gridSize)
                .attr("height", gridSize)
                .style("fill", function(d) { 
                    if (d.avgDepDelay <= 0) {
                        return colors[0];
                    } else if (d.avgDepDelay <= 15) {
                        return colors[1];
                    } else if (d.avgDepDelay <= 30) {
                        return colors[2];
                    } else if (d.avgDepDelay <= 45) {
                        return colors[3];
                    } else {
                        return colors[4];
                    }
                    
                    });

            cards.select("title").text(function(d) { return d.avgDepDelay; });
            
            cards.exit().remove();
        }
        heatmapChart(flattened);
        
    </script>

<script>
    // ===============================================================
    // Define legend, using ordinal scale
    function legendDemo() {
 
        var sampleNumerical = [0,15,30,45,500];
        var sampleThreshold=d3.scaleThreshold()
            .domain(sampleNumerical)
            .range(["#1a9641","#a6d96a","#ffffbf","#fdae61","#d7191c"]);
        
        var horizontalLegend = d3.svg.legend()
            .units("Delay Severity")
            .cellWidth(120)
            .cellHeight(25)
            .inputScale(sampleThreshold)
            .cellStepping(100);
        
        // var leg = legend.append("g")
        //     .attr("transform", "translate(50,70)")
        //     .attr("class", "legend")
        //     .call(horizontalLegend);
        
 }
 </script>

</body>
</html>
